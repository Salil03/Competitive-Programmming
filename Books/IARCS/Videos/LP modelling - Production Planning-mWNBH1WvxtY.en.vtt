WEBVTT
Kind: captions
Language: en

00:00:02.139 --> 00:00:06.759
Let us look at another example of modeling
a problem using Linear Programming, again

00:00:06.759 --> 00:00:08.490
to do with production.

00:00:08.490 --> 00:00:15.260
So, recall that a linear program is an optimization
problem, where you have some variables which

00:00:15.260 --> 00:00:20.580
describe the quantities you want to compute.
And you now have linear constraints on these

00:00:20.580 --> 00:00:25.429
variables, as well as a linear function describing
what it is that you want to optimize, maximize

00:00:25.429 --> 00:00:29.029
or minimize, that is called the objective
function.

00:00:29.029 --> 00:00:34.210
And one way to solve a linear program is to
think of it geometrically and use the simplex

00:00:34.210 --> 00:00:38.500
algorithm and the simplex algorithm exploits
the fact that the optimum value of a linear

00:00:38.500 --> 00:00:44.550
program is always at the vertex of the fusible
region. So, it starts at some vertex and it

00:00:44.550 --> 00:00:50.129
keeps going from one vertex to a neighbor,
until it finds a vertex whose value is optimum

00:00:50.129 --> 00:00:56.771
with respect to it is neighbors and the claim
is that vertex actually represents the solution.

00:00:56.771 --> 00:01:02.930
We also said that we can justify that this
is the optimum value by constructing the dual,

00:01:02.930 --> 00:01:08.751
which has how to combine the constraints together
to minimize the combination and the solution

00:01:08.751 --> 00:01:12.360
which solves both the original and the dual
is actually an optimum value.

00:01:12.360 --> 00:01:19.740
So, the next example we are going to look
at is the carpet manufacturing company. So,

00:01:19.740 --> 00:01:25.200
we have a company which makes hand woven carpets
and we currently employee 30 employees, each

00:01:25.200 --> 00:01:32.189
employee produces 20 carpets a month and his
pay 20,000 rupees a salary. So, if we just

00:01:32.189 --> 00:01:37.080
look at the cost per carpet, then we are paying
the 1000 rupees to manufacture each carpet.

00:01:37.080 --> 00:01:43.930
Now, it turns out that our monthly demand
is seasonal, so after looking at some task

00:01:43.930 --> 00:01:49.939
data we are made an estimate of the amount
of carpets at we can expect to sell in each

00:01:49.939 --> 00:01:56.280
month of the year. So, we have a range of
demand from 440 to 920, so remember that you

00:01:56.280 --> 00:02:02.190
have 30 employees and 20 carpets each, I can
make 600 carpets in a given month, this is

00:02:02.190 --> 00:02:06.640
what I can do with current stake. Now, some
times the demand is as low as 440.

00:02:06.640 --> 00:02:11.340
So, if I make 600 carpets, now if I have 30
employees and each one is going to produce

00:02:11.340 --> 00:02:15.020
20 carpets a month, I am going to get that
back. So, I am paying a percent to make carpets

00:02:15.020 --> 00:02:19.540
it not set to ideal, so every employee will
produce 20 carpets a month. Therefore, I will

00:02:19.540 --> 00:02:23.960
always produce 600 carpets, but I will have
160 pairs which I cannot sell that. But, there

00:02:23.960 --> 00:02:27.879
are some months where I would have a demand
for 320 and now the question of whether I

00:02:27.879 --> 00:02:32.090
have enough carpets to sell or not.
So, I know the demand from January to December

00:02:32.090 --> 00:02:37.459
and say these are stored as d 1 for January,
d 2 for February and so on to d 12 for December.

00:02:37.459 --> 00:02:42.820
So, I have these 12 quantities which are known
net marks, these are how many carpets I can

00:02:42.820 --> 00:02:44.480
expect to sell and each of these marks.

00:02:44.480 --> 00:02:51.500
So, now, I have to come up with this strategy
to cope with this varying demand, in order

00:02:51.500 --> 00:02:56.900
to make sure that I lose the least amount
of money, because of this coping demand fluctuation.

00:02:56.900 --> 00:03:04.150
So, one possibility is that whenever I have
extra demand I pay overtime, so if I pay over

00:03:04.150 --> 00:03:10.540
time I get workers to work longer hours and
make more carpets. But, there are two costs

00:03:10.540 --> 00:03:17.110
to this, the working wage per hour for overtime
is typically higher than the regular edge,

00:03:17.110 --> 00:03:23.650
let us assume it is 80 percent extra.
So, if you remember originally we paid 1000

00:03:23.650 --> 00:03:28.970
rupees per carpet as our labor cost, so if
I make it in overtime, it is going to cost

00:03:28.970 --> 00:03:33.440
be instead rupees 1800 per carpet. Because,
it is going to take the same amount of time

00:03:33.440 --> 00:03:38.560
and the person is going to be paid 80 percent
more. So, 80 percent of 1000 is 800, so it

00:03:38.560 --> 00:03:44.629
is going to cost 1800 per carpet is the overtime
rate, in the other thing is that you cannot

00:03:44.629 --> 00:03:46.790
of course, expect somebody to work 24 hours
a day.

00:03:46.790 --> 00:03:52.090
So, there is a limit saying that a worker
cannot make more than 30 percent, cannot spend

00:03:52.090 --> 00:03:57.300
more than 30 percent overtime. So, if they
make 20 per month normally, then at most they

00:03:57.300 --> 00:04:05.230
can go plus 6, a single worker can make at
most now including overtime 26 per month.

00:04:05.230 --> 00:04:10.510
The other option for me is to add or subtract
employees, I might want to add new workers,

00:04:10.510 --> 00:04:15.450
in case I have a higher demand projected that
month or I might need to terminate some employees

00:04:15.450 --> 00:04:21.100
in case my demand drops below 600.
But, these also comes with a cost, it goes

00:04:21.100 --> 00:04:25.140
I have to do some paper work and also I have
to give some compensation and so on. So, let

00:04:25.140 --> 00:04:31.740
us assume that there are some certain cost
3200 is the cost associate in hiring a worker

00:04:31.740 --> 00:04:39.220
and 4000 rupees is the cost associated with
firing a worker. And finally, I can store

00:04:39.220 --> 00:04:45.100
carpets when Iâ€™ve made excess and sell them
later when I have a demand, but storage also

00:04:45.100 --> 00:04:49.370
costs something. So, let us assume that storing
a carpet cost rupees 80 per month.

00:04:49.370 --> 00:04:54.480
Because, I have to keep it carefully avoid
damage from moisture and so on, these are

00:04:54.480 --> 00:04:58.840
the various options I can pay overtime. But,
up to a limit and it cost more for carpet

00:04:58.840 --> 00:05:04.360
made by a person who repaid overtime. I can
either add or subtract from my work force,

00:05:04.360 --> 00:05:09.410
but this also comes with the cost each time
I do it. And finally, I have a surplus storage

00:05:09.410 --> 00:05:18.661
cost in case I want to keep my production,
hand it over from one month to the next.

00:05:18.661 --> 00:05:23.290
So, we want to make a linear program out of
this, so we need some variables. So, we are

00:05:23.290 --> 00:05:30.470
dealing with these 12 months January, February
to December. So, it is natural to think of

00:05:30.470 --> 00:05:36.350
everything as happening within this scope
of one month. So, for month i where i ranges

00:05:36.350 --> 00:05:41.360
from 1 to 12, let us assume that we have Wi
workers, initially we have 30 workers. Then,

00:05:41.360 --> 00:05:47.090
from this 30 we will either hire or fire some
to get the workers in the empty, then if hire

00:05:47.090 --> 00:05:51.680
or fire some to get February and so on.
So, each month potentially we have more or

00:05:51.680 --> 00:05:57.780
less workers, but we start with 30, now these
30 workers will make some number of carpets.

00:05:57.780 --> 00:06:05.670
So, let us assume that the total number of
carpets made in a month is X i and O i which

00:06:05.670 --> 00:06:09.750
is included in X i in terms of the total.
But, O i is specifically the number of carpets

00:06:09.750 --> 00:06:17.680
which are made in overtime, because for these
there is an extra cost, this is over and above

00:06:17.680 --> 00:06:23.350
salary we already pay the worker.
And finally, we said that we have this hiring

00:06:23.350 --> 00:06:28.240
and firing cost, so let h i be the number
of workers hired at the beginning of a month

00:06:28.240 --> 00:06:33.620
and f i be the number of workers fired at
the beginning of a month. And let S i stands

00:06:33.620 --> 00:06:39.930
for the number of surplus carpets that I have
in stock at the end of month i. So, I initially

00:06:39.930 --> 00:06:44.500
assume that I have an empty warehouse, so
s 0 as 0, but s 1 with say at the end of January

00:06:44.500 --> 00:06:48.910
how many carpets am I storing, s 2 with say
at the end of February how many carpets am

00:06:48.910 --> 00:06:55.530
I storing and so on.
So, there are 1, 2, 3, 4, 5, 6 quantities,

00:06:55.530 --> 00:07:02.030
each of these quantities is there for 12 months.
So, as 72 variables plus I have these default

00:07:02.030 --> 00:07:07.460
initial variables for w0 or s0, so I have,
74 variables. So, this is a lot of things

00:07:07.460 --> 00:07:11.250
that I have estimate, but it turns out that
actually in a linear program this is not a

00:07:11.250 --> 00:07:15.660
large number, it can be solved quite efficiently
by any of the standard things including simplex.

00:07:15.660 --> 00:07:21.460
So, let us now thing of the constraints, so
the first constraint to the usual one, which

00:07:21.460 --> 00:07:27.560
is their every quantity that we are talking
about is strictly greater than equal to 0.

00:07:27.560 --> 00:07:33.470
The second constraints talks about, how the
number of carpets made break up into the regular

00:07:33.470 --> 00:07:38.450
production plus the overtime. So, if I make
i carpets in a month, then each worker, remember

00:07:38.450 --> 00:07:44.740
W i is the number of workers in my establishment
in month i, will make 20. So, 20 time W i

00:07:44.740 --> 00:07:51.470
what workers in month i produce within the
normal time and in addition to that O i is

00:07:51.470 --> 00:07:54.830
just the number of carpets made.
So, O i is not the number of hours overtime,

00:07:54.830 --> 00:08:06.080
so O i is the number of carpets. So, each
month I make 20 times number of workers plus

00:08:06.080 --> 00:08:16.400
O i, now if I start if I had W i minus 1 workers
last month and I hired a few and fired a few,

00:08:16.400 --> 00:08:20.620
then the total number I have now is the old
number plus the number Iâ€™ve hired plus minus

00:08:20.620 --> 00:08:25.630
the number Iâ€™ve fired. So, this is the constraint
on how each of the W i is connected to the

00:08:25.630 --> 00:08:29.070
previous W i.

00:08:29.070 --> 00:08:33.572
Similarly, the stock is connected to how much
I had before I started this month, how much

00:08:33.572 --> 00:08:40.490
I made this month and how much I sold. So,
remember that d 1 to d 12 was the demand,

00:08:40.490 --> 00:08:45.470
so this is a fixed quantity, either not variables
these are known values. So, in this month

00:08:45.470 --> 00:08:50.700
I would have sold di, but I produce X i. So,
X i minus d i is the exits that I produce

00:08:50.700 --> 00:08:55.940
this month are the deficit as the case may
be I started with the surplus Si minus 1.

00:08:55.940 --> 00:09:01.050
So, if I add this month's surplus are defied
I get the total surplus at the end of the

00:09:01.050 --> 00:09:05.950
month. Remember, I cannot have negative carpets,
Si all those things must always be bigger

00:09:05.950 --> 00:09:12.370
than equal to 0. And finally, as we said before
a worker to produces 20 carpets in regular

00:09:12.370 --> 00:09:18.140
month, if I add now the fact that you can
do 30 percent overtime, this is 20 plus 6.

00:09:18.140 --> 00:09:25.950
So, the number of carpets made in overtime
can be at most 6 per worker. So, O i should

00:09:25.950 --> 00:09:30.540
be less than or equal to 6 times W i, so these
are all constraints now.

00:09:30.540 --> 00:09:36.650
So, now given these constraints what we want
to do is minimize the total amount of cost

00:09:36.650 --> 00:09:42.500
that we are going to put up. So, first this
is the regular salary cost, the regular salary

00:09:42.500 --> 00:09:47.040
cost is 20,000 per worker and we have W 1
workers in month 1, W 2 in month 2 and W 2

00:09:47.040 --> 00:09:51.030
in month 12. So, we add of the total number
of workers, each of them is paid 20,000 rupees.

00:09:51.030 --> 00:09:57.470
So, this is the total salary before the year,
then depending on how many people we hire

00:09:57.470 --> 00:10:01.790
in each month, for each hire we pay 3000,
so this is our hiring bill.

00:10:01.790 --> 00:10:06.770
Similarly, for each person that we business
we have to pay 4000 first that. So, this is

00:10:06.770 --> 00:10:14.920
are firing bill, then the number of wrong
carpet that have been keep in storage in each

00:10:14.920 --> 00:10:24.080
month in case 80 rupees per carpet cost. So,
have to multiply the total storage by 80 and

00:10:24.080 --> 00:10:29.170
finally, when I pay overtime and paying our
number the salary. So, each carpet made in

00:10:29.170 --> 00:10:32.670
overtime, remember cost 1800 rupees as suppose
to 1000 rupees which is already accounted

00:10:32.670 --> 00:10:42.590
for in salary, so this is my overtime cost.
So, this says that we can take this fairly

00:10:42.590 --> 00:10:50.060
complicated looking question about production
with the demand and hiring and inspiring and

00:10:50.060 --> 00:10:56.570
productivity and all that and set it out with
some 72 plus 274 variables and a complex cost

00:10:56.570 --> 00:11:01.600
function and feed it to simplex and get an
answer.

00:11:01.600 --> 00:11:09.650
So, we run simplex and we find a solution,
so are we done? so it turns out that we might

00:11:09.650 --> 00:11:15.210
get an answer which is not something that
we can actually used. For instance, we might

00:11:15.210 --> 00:11:23.800
get an answer which says h 3 is equal to 10.6.
So, this says that, we must hire a fractional

00:11:23.800 --> 00:11:28.610
number of people in a month. Now, obviously,
we cannot do this at the same time we have

00:11:28.610 --> 00:11:32.180
not any of our constraints express that the
values must be integers.

00:11:32.180 --> 00:11:38.390
So, what can be do about this, well we can
take this 10.6 and we can look for the nearest

00:11:38.390 --> 00:11:45.040
integer 10 or a 11 and reevaluate what happens
to the cost, if we make it even integer. So,

00:11:45.040 --> 00:11:53.260
this is called integer rounding, now if the
values are big now theyâ€™re like 10, 11 the

00:11:53.260 --> 00:11:59.010
two digit value say, then rounding is relatively
small displacement and the quality of the

00:11:59.010 --> 00:12:03.220
optimum will not change must based on it is.
But, if the numbers are small, if I am rounding

00:12:03.220 --> 00:12:09.440
between say I am going to take it from 0.5
to 1 or 0 of 1.5 to 2 or 1 then the effect

00:12:09.440 --> 00:12:15.410
of the rounding is quite can be quite task.
So, this is the general problem with linear

00:12:15.410 --> 00:12:19.610
programming which is linear programming cannot
guarantee that you have the integer solutions,

00:12:19.610 --> 00:12:24.779
when you want an integer solution you can
use rounding to achieve an integer solution,

00:12:24.779 --> 00:12:29.540
but you have to be careful that the rounding
actually gives you one optimum. Now, why not

00:12:29.540 --> 00:12:34.920
just insist that you want an integer solution.
So, can you not set up this same problem and

00:12:34.920 --> 00:12:39.630
solve it, but require the solutions to be
integers, unfortunately this terms out to

00:12:39.630 --> 00:12:44.310
be quite a hard problem.
So, we have found, we have claimed rather,

00:12:44.310 --> 00:12:48.590
that when we set up general linear programming
problem, we can solve them efficiently. So,

00:12:48.590 --> 00:12:52.360
simplex is not an efficient solution, but
an effective solution, but there are interior

00:12:52.360 --> 00:12:56.600
point methods and other polynomial time algorithms
for linear programming. But, if you change

00:12:56.600 --> 00:13:00.560
the rules of the game and say I do not want
to arbitrary solution; that means, constraints,

00:13:00.560 --> 00:13:04.700
but I want to one we are all the values that
I get an integers, then we have the, so called

00:13:04.700 --> 00:13:09.570
integer linear programming.
And integer linear programming unfortunately

00:13:09.570 --> 00:13:14.700
is not solvable efficiently or it is not known
solvable efficiently. So, the best we can

00:13:14.700 --> 00:13:18.900
hope to do for integer linear programming
is to actually try and turn it into an arbitrary

00:13:18.900 --> 00:13:23.400
linear program and somehow interpret the answers
as integers by doing appropriate rounding.

