WEBVTT
Kind: captions
Language: en

00:00:01.400 --> 00:00:06.160
For our next example of linear programming,
we will look at a problem involving graphs

00:00:06.160 --> 00:00:09.499
and networks to do with Network Bandwidth.

00:00:09.499 --> 00:00:16.209
So, suppose we have a small communication
network involving three users. So, the users

00:00:16.209 --> 00:00:22.289
are capital A, capital B and capital C, and
each of them is connected through some switches,

00:00:22.289 --> 00:00:29.550
which we call a, b and c. So, we have a network
which, this in an internet network, which

00:00:29.550 --> 00:00:35.390
connects these three users and our requirement
is to ensure that each pair of users A to

00:00:35.390 --> 00:00:42.500
B, B to C and A to C gets at least two mega
bits per second of connectivity from between

00:00:42.500 --> 00:00:45.790
that pair of users.
So, we want at least two Mbps connectivity

00:00:45.790 --> 00:00:50.070
along these three users. Now, notice that
from A to B, there are two ways I can send

00:00:50.070 --> 00:00:58.800
packets, I can send them directly via A and
B or I can send them indirectly via small

00:00:58.800 --> 00:01:04.460
c. So, it turns out, it does not really a
matter from the point of viewer, we uses whether

00:01:04.460 --> 00:01:11.560
this 2 Mbps bandwidth comes from the shorter
a red route and a longer green route.

00:01:11.560 --> 00:01:16.770
So, our aim is to combine the capacity of
the red and the green for each pair, so similarly

00:01:16.770 --> 00:01:20.500
there will be, for example, there will be
a direct route from B to C and there will

00:01:20.500 --> 00:01:24.450
be an indirect route that goes like this.
So, for each pair, there is a direct route

00:01:24.450 --> 00:01:29.060
and an indirect route. So, long as combinations
of the capacities of the direct and indirect

00:01:29.060 --> 00:01:34.760
routes add up to at least 2 Mbps, our customers
are satisfied. So, now the constraint that

00:01:34.760 --> 00:01:41.340
we have is that these links have a capacity.
So, if I look at example the link between

00:01:41.340 --> 00:01:46.460
B and C, it can only transmit 13 mega bits
per second total across all the different

00:01:46.460 --> 00:01:48.110
connections that it is a part of.

00:01:48.110 --> 00:01:55.130
Now, on the other side, we earn some money
from this customer which is not uniform. So,

00:01:55.130 --> 00:02:03.310
from the A, B link, we get 300 rupees per
mega bit, Mbps per month, but from B to C

00:02:03.310 --> 00:02:09.140
we get only 200, but from A to C we get 400.
So, now, we have to allocate a minimum of

00:02:09.140 --> 00:02:13.349
2 mega bits. But customers are will to take
as much as we can give them subject to that

00:02:13.349 --> 00:02:18.330
minimum and we get a certain amount of revenue
depending on how we utilizes the capacity.

00:02:18.330 --> 00:02:22.680
So, our goal is to allocate bandwidth to maximize
the revenue given that the customers are willing

00:02:22.680 --> 00:02:26.489
to take anything above 2 Mbps.

00:02:26.489 --> 00:02:34.529
So, as we have been seeing, our aim is to
set this up as a linear program. So, in this

00:02:34.529 --> 00:02:38.499
case, what are the variables that we are going
to use? So, recall that we said that every

00:02:38.499 --> 00:02:45.400
connection has two routes. So, we have A to
B coming via the short route and we have A

00:02:45.400 --> 00:02:52.459
to B coming via the long route. So, what we
use is the variable x, from A to B to denote

00:02:52.459 --> 00:02:58.870
that quantity that is flowing on the red route
and similarly, y from A to B to denote the

00:02:58.870 --> 00:03:03.290
quantity, it is flowing on the green route.
So, we have two variables associated with

00:03:03.290 --> 00:03:08.919
the A to B service that we can provide, how
much goes directly x A B, how much goes indirectly

00:03:08.919 --> 00:03:14.840
y A b. Similarly, between B and C will have
x B C which goes to the short route and y

00:03:14.840 --> 00:03:20.879
B C which goes via the long route and same
way for x A C and y A C. So, we have the six

00:03:20.879 --> 00:03:26.900
variables describing the different ways of
connecting pairs of customers.

00:03:26.900 --> 00:03:34.879
Now, these variables are constrained by the
capacities of links. So, supposing we look

00:03:34.879 --> 00:03:42.220
at this particular link, the link from small
b to Capital B, now it has a capacity of 10.

00:03:42.220 --> 00:03:48.120
Now, what route does it lie on, so it certainly
lies on the short route A to B. So, it lies

00:03:48.120 --> 00:03:55.069
on the x A B route. So, if any quantity which
is assigned to x A B will reach into these

00:03:55.069 --> 00:04:01.999
10, similarly it lies on the y A b route,
so that also start ultimately reach capital

00:04:01.999 --> 00:04:05.730
B to small b.
So, this will also meet into that, it also

00:04:05.730 --> 00:04:13.819
lies on the B to C route. So, x B C and finally,
it lies on the B to C route going to the other

00:04:13.819 --> 00:04:20.030
way, this is y B C. So, all these four routes
put together will add up to whatever capacities

00:04:20.030 --> 00:04:25.750
flowing through this link and this link has
capacity 10, so x A B plus y A B plus x B

00:04:25.750 --> 00:04:29.610
C plus y B C has to be at most 10.

00:04:29.610 --> 00:04:38.659
So, likewise, if I look at for instances this
link, the same way I have all these different

00:04:38.659 --> 00:04:44.400
things which are coming here. So, I have four
quantities, I have a direct link from A to

00:04:44.400 --> 00:04:48.940
B, the indirect link from A to B, a direct
link from A to C and the indirect link from

00:04:48.940 --> 00:04:54.900
A to C and they all must add up to at most
12. And the third same of wholes for this,

00:04:54.900 --> 00:05:03.020
so these three constraints that we have seen
here, account for the capacities of that tail

00:05:03.020 --> 00:05:08.110
and links. So, we are account for this capacity,
this capacity and this capacity, so these

00:05:08.110 --> 00:05:12.990
three capacities are connected to our flows
by these three equations. So, this still leaves

00:05:12.990 --> 00:05:16.230
us to account for these three constraints.

00:05:16.230 --> 00:05:23.400
So, now, if we look at this link, then this
is a part of three connections, it is the

00:05:23.400 --> 00:05:32.509
A to B direct connection, it is on the B to
C indirect connection, and finally it is on

00:05:32.509 --> 00:05:38.599
the A to C indirect connection, so there is
a direct connection A to B plus the indirect

00:05:38.599 --> 00:05:46.580
connection B to C plus the indirect connection
A to C, all together cannot be more than 6.

00:05:46.580 --> 00:05:52.039
In the same way, we have similar equation
for this link.

00:05:52.039 --> 00:06:01.110
So, it is lies on the indirect connection
from A to B, it lies on the indirect connection

00:06:01.110 --> 00:06:11.259
from A to B, it lies on the direct connection
from B to C and it lies on the indirect connection

00:06:11.259 --> 00:06:17.349
from A to C. So, these three things cannot
exceed 13 and the third same thing holds for11.

00:06:17.349 --> 00:06:26.560
So, for a 11, we have that it lies on the
direct connection from A to C and on these

00:06:26.560 --> 00:06:31.450
two indirect connections, A to B indirect
connection and B to C indirect connection.

00:06:31.450 --> 00:06:35.780
So, in this way now we have covered the six
constraints, so we have three constraints

00:06:35.780 --> 00:06:40.860
corresponding to the tail and links and we
have three constraints corresponding to the

00:06:40.860 --> 00:06:43.940
links, the triangle. So, we have six total
constraints.

00:06:43.940 --> 00:06:49.830
Finally, we have this minimum requirement
that between A and B, we must apply at least

00:06:49.830 --> 00:06:53.800
2, between B and C we must apply at least
2 and between A and C we must apply at least

00:06:53.800 --> 00:06:57.729
2 and these are the sums of the indirect and
direct, we do not distinguish between them.

00:06:57.729 --> 00:07:03.080
And of course, every capacity must be non
negative, so this gives us all our constraints.

00:07:03.080 --> 00:07:08.660
What are the objective functions? The objective
function is the revenue that we realize. So,

00:07:08.660 --> 00:07:14.509
the A to B connection is x A B plus y A B,
this is the total volume that gives us 300.

00:07:14.509 --> 00:07:20.759
Similarly, x B C plus y B C gives us 200 and
x A C plus y A C gives us 400. So, we multiply

00:07:20.759 --> 00:07:27.189
300 into x A B plus y A B 200 into x B C plus
y B C and 400 into x A C plus y A C and add

00:07:27.189 --> 00:07:32.009
it up, this is our total revenue and you want
to maximize this revenue.

00:07:32.009 --> 00:07:38.050
So, for these particular numbers, these are
the answers that we get, that we have nothing

00:07:38.050 --> 00:07:43.639
flowing directly from A to B, we have 7 going
from A to B directly and so on. So, if you

00:07:43.639 --> 00:07:50.900
look for the example at this link. So, this
link lies on the direct route from A to B,

00:07:50.900 --> 00:08:00.090
so that is 0, it lies on the indirect route
from A to B, that is 7, it lies in the direct

00:08:00.090 --> 00:08:08.379
route from B to C, that is 1.5 and it lies
on the indirect route from B to C, that is

00:08:08.379 --> 00:08:15.789
another 1.5. If you see that this is 10, therefore
this link as a total capacity of 10 and all

00:08:15.789 --> 00:08:19.550
10 units are utilizes, given the combination
that it gives.

00:08:19.550 --> 00:08:25.650
In this way, you can try it for each link
and find out that, everything except this

00:08:25.650 --> 00:08:32.120
link of the 11 is actually saturated by this
flow, it also turns out here that you can

00:08:32.120 --> 00:08:36.670
see that some of the quantities that we get
here are fractional. But since we are dealing

00:08:36.670 --> 00:08:41.400
with internet bandwidth, there is no reason
it is not like, hiring or firing of person

00:08:41.400 --> 00:08:47.510
or making offer corporate, we can easily make
split our bandwidth in some fractional quantities,

00:08:47.510 --> 00:08:50.170
so that is not a problem.

00:08:50.170 --> 00:08:56.670
There is however, another problem which is
the way we are actually set up the linear

00:08:56.670 --> 00:09:01.660
program. So, we have the set up the linear
program is to take each possible way of outing

00:09:01.660 --> 00:09:07.700
the traffic. So, we have A to B, we have a
link, we have A to B like this, we have another

00:09:07.700 --> 00:09:13.140
path and for an each path, we have an variable
here, x A B, y A B and so on. So, the every

00:09:13.140 --> 00:09:16.600
path is represented by the quantity flowing
through that path.

00:09:16.600 --> 00:09:22.060
So, the problem with is that, the number of
paths flowing through the graph is going to

00:09:22.060 --> 00:09:26.464
be exponential. So, this is not good a modeling
strategy. So, what we are doing is, we are

00:09:26.464 --> 00:09:31.780
taking a network bandwidth allocation model
and we are implementing it or we are describing

00:09:31.780 --> 00:09:36.170
it using linear programming. But if we setup
a program, linear program, which has a large

00:09:36.170 --> 00:09:41.680
number of variables, then the problem is in
some sense blowing up in complexity in that

00:09:41.680 --> 00:09:43.620
translation.
So, we do not want this, we want efficient

00:09:43.620 --> 00:09:48.430
translations and this is not one, it so happens
that for a small problem like this of only

00:09:48.430 --> 00:09:53.770
three customers, it was fine, but as it grows
larger and larger this translation will not

00:09:53.770 --> 00:09:58.690
scale up. But we will look at another way
of looking at the these network flows as they

00:09:58.690 --> 00:10:03.440
are called and see that in general network
flows can be easily represented, in terms

00:10:03.440 --> 00:10:07.550
of linear programs. But it important to note
that in general, when we do a translation

00:10:07.550 --> 00:10:14.030
into a linear program, we would like the number
of variables we get to be small - say polynomial

00:10:14.030 --> 00:10:18.340
in the input problem. So, in the input problem,
if we have a certain size, the linear program

00:10:18.340 --> 00:10:18.890
should not blow up.

