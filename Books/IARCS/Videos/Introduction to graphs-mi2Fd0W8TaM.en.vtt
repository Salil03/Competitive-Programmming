WEBVTT
Kind: captions
Language: en

00:00:01.390 --> 00:00:06.319
So, when we design an algorithm for a problem,
we need to represent the information of the

00:00:06.319 --> 00:00:11.060
problem in a way that we can manipulate. So,
this is called modeling. So, we need some

00:00:11.060 --> 00:00:16.920
kind of notation and structures to model the
problem. So, in this module we will look at

00:00:16.920 --> 00:00:21.439
a very important class of structures called
graphs which are immensely useful in many

00:00:21.439 --> 00:00:22.820
different contexts.

00:00:22.820 --> 00:00:29.939
So, let us start with the problem of coloring
a political map. So, here is a map of the

00:00:29.939 --> 00:00:35.970
states of India, as you can see the different
states have different colors. Now, what is

00:00:35.970 --> 00:00:41.140
the principle behind this coloring? When we
color a state, we must make sure that no state

00:00:41.140 --> 00:00:45.660
adjacent to it has the same color, no two
states which are side by side that share a

00:00:45.660 --> 00:00:49.650
common boundary should have the same color,
because otherwise it is difficult for us to

00:00:49.650 --> 00:00:53.890
distinguish one state from another.
So, we can see that Rajasthan has a different

00:00:53.890 --> 00:00:59.129
color from Gujarat, because Rajasthan and
Gujarat at this point share a common boundary.

00:00:59.129 --> 00:01:02.690
Similarly, Rajasthan and Madhya Pradesh have
a boundary, therefore Rajasthan and Madhya

00:01:02.690 --> 00:01:07.460
Pradesh have different colors. On the other
hand, Rajasthan and Telangana do not share

00:01:07.460 --> 00:01:11.590
a boundary, so we can use the same color for
Rajasthan and Telangana.

00:01:11.590 --> 00:01:17.270
So, question we may ask is given such a map,
how many colors do we need to color it to

00:01:17.270 --> 00:01:22.860
satisfy this criteria. Now, clearly we can
assign every state a different color and thus

00:01:22.860 --> 00:01:27.310
we can ensure that no two states which have
a boundary in common, in fact no two states

00:01:27.310 --> 00:01:32.490
anywhere in the map have the same color. But,
in many situation we might expect to do with

00:01:32.490 --> 00:01:37.030
much fewer than that many colors. So, our
question is, how many colors do we need?

00:01:37.030 --> 00:01:43.909
So, here is the way to represent this problem
more abstractly. So, the first thing we do

00:01:43.909 --> 00:01:49.030
is that we replace, we do not replace, we
actually assign to each state in the map,

00:01:49.030 --> 00:01:54.150
a black dot. So, roughly where the state,
center of the state we place this black dot.

00:01:54.150 --> 00:01:59.420
Now, we have to record the information about
how these states are neighbors of each other.

00:01:59.420 --> 00:02:03.920
So, what we do is we connect every pair of
states that share a boundary.

00:02:03.920 --> 00:02:12.530
So, as we saw Rajasthan and Gujarat have a
boundary in common, a border and so we put

00:02:12.530 --> 00:02:20.360
this kind of an edge between Rajasthan and
Gujarat, on this map. Now, our coloring problem

00:02:20.360 --> 00:02:27.400
is to assign colors to the states, so that
no two states which share an edge which are

00:02:27.400 --> 00:02:31.760
on opposite size of an edge have the same
color. So, coloring the state is the same

00:02:31.760 --> 00:02:35.540
as coloring the dot associated with the state.
So, we can start for example, with a state

00:02:35.540 --> 00:02:40.380
like Uttar Pradesh and give it a red color
and now this is red, it means that state which

00:02:40.380 --> 00:02:48.360
are near it such as Uttarakhand, or Haryana,
or Rajasthan, or Madhya Pradesh, or Chhattisgarh,

00:02:48.360 --> 00:02:53.900
or Jharkhand, or Bihar. None of these can
now be colored red, because they are all neighboring

00:02:53.900 --> 00:02:59.849
states. So, in the next step having colored
Uttar Pradesh red, we have now colored Haryana

00:02:59.849 --> 00:03:03.720
with different color say blue and Uttrakhand
which has a common boundary with both Haryana

00:03:03.720 --> 00:03:08.519
and Uttar Pradesh is now colored green, so
we have used three colors.

00:03:08.519 --> 00:03:13.310
If we proceed to Rajasthan, we find that Rajasthan
does not share a boundary with Uttrakhand.

00:03:13.310 --> 00:03:18.290
So, it is possible to reuse the green color,
so with sticking with three colors, we can

00:03:18.290 --> 00:03:24.710
extend our coloring to Rajasthan. When we
get to Punjab, now Punjab is not even connected

00:03:24.710 --> 00:03:29.620
to Uttar Pradesh, so we can reuse the red
color of Uttar Pradesh for Punjab. However,

00:03:29.620 --> 00:03:35.519
when we come to Himachal Pradesh, we find
that Himachal Pradesh is connected to Punjab

00:03:35.519 --> 00:03:40.370
and Haryana and Uttrakhand and therefore,
we have already used up these three colors

00:03:40.370 --> 00:03:42.980
and we must use a fourth color for Himachal
Pradesh.

00:03:42.980 --> 00:03:49.010
So, if you keep continuing in this way, we
can eventually assign colors to all the states

00:03:49.010 --> 00:03:54.560
in the country which satisfy this particular
property. That whenever, I see two dots, if

00:03:54.560 --> 00:03:58.530
they are connected by a line, then the two
dots have different colors, this captures

00:03:58.530 --> 00:04:03.980
abstractly the property that we want any two
states with a common border, to have different

00:04:03.980 --> 00:04:05.680
colors on the map.

00:04:05.680 --> 00:04:13.989
So, now if you look at this map coloring problem,
the actual map underlying these dots is now

00:04:13.989 --> 00:04:19.630
not necessary anymore, because the dots captured
everything about the map. So, we can actually

00:04:19.630 --> 00:04:24.500
throw away the underlying picture, and just
keep this pattern of dots and the connections

00:04:24.500 --> 00:04:28.780
between them and if we assign colors to these
dots, keeping in mind that these lines are

00:04:28.780 --> 00:04:33.280
represent common boundaries, we are solving
the same problems as solving the original

00:04:33.280 --> 00:04:35.690
map coloring problem.

00:04:35.690 --> 00:04:41.920
So, this kind of a diagram, is what we call
a graph, so these dots are called vertices,

00:04:41.920 --> 00:04:47.860
so these are the vertices, they are also called
nodes. So, there are two words to describe

00:04:47.860 --> 00:04:54.100
these, nodes and vertices. It is useful to
know that vertices is the plural of vertex,

00:04:54.100 --> 00:05:01.190
so vertex is one node, many nodes are called
vertices and these connections are the edges.

00:05:01.190 --> 00:05:05.550
So, we have edges between vertices, so it
is very simple. A graph is just a picture,

00:05:05.550 --> 00:05:10.470
it consists of some dots which are nodes or
vertices and some connections between them

00:05:10.470 --> 00:05:14.150
which are called edges.

00:05:14.150 --> 00:05:24.760
So, the problem that we have solved is called
graph coloring. So, we used four colors, you

00:05:24.760 --> 00:05:29.680
can check that we have used four colors, we
have used blue, green, red and yellow and

00:05:29.680 --> 00:05:34.550
we have managed to color this entire graph
with just these four colors. Now, you might

00:05:34.550 --> 00:05:39.740
ask is it a property of this graph or is it
a property of all graphs. So, in fact it turns

00:05:39.740 --> 00:05:45.430
out that if you take any map of the kind that
we drew and convert it into a graph like we

00:05:45.430 --> 00:05:51.340
did, four colors are always enough.
Now, this is a mathematical fact about graph.

00:05:51.340 --> 00:05:55.680
So, you can take a particular problem about
coloring a particular map and then we can

00:05:55.680 --> 00:06:00.220
ask a general question about all maps of this
kind and we can actually prove a mathematical

00:06:00.220 --> 00:06:04.590
fact about it or a theorem, which says that
in any map which is derived from this kind

00:06:04.590 --> 00:06:09.350
of a, any graphs which is derive from this
kind of a map, four colors are enough to solve

00:06:09.350 --> 00:06:13.810
the graph coloring property. Now, this is
not an easy problem to solve, it was an open

00:06:13.810 --> 00:06:20.150
problem for many years and it was a very celebrated
theorem, when it was actually proved.

00:06:20.150 --> 00:06:24.520
Now, you might observe that though we have
found a coloring of this map using our graph

00:06:24.520 --> 00:06:29.020
with only four colors, the original map which
we started with had many more than four colors.

00:06:29.020 --> 00:06:35.460
So, we have this, if you look around, you
will find 1, 2, 3, 4 and then 5 at least five

00:06:35.460 --> 00:06:40.930
colors on this map, 6 if you include this
white and so on. So, though we have a theorem

00:06:40.930 --> 00:06:45.460
that we can use four colors, in actual practice
the person who has colored this map has used

00:06:45.460 --> 00:06:47.800
many more than four colors.

00:06:47.800 --> 00:06:53.880
So, one of the advantages of moving to a representation
such as a graph is that we have thrown away

00:06:53.880 --> 00:06:58.170
all the inessential features of the problem,
we do not need to know the shape of this state,

00:06:58.170 --> 00:07:04.120
we do not need to know its size. We just need
to know which state is connected to which

00:07:04.120 --> 00:07:08.710
state, that is which state is the border of
which state. So, now once we have the graph,

00:07:08.710 --> 00:07:13.900
then we can redraw the graph.
For instance we can expand out these kinds

00:07:13.900 --> 00:07:20.680
of crowded portions to make the connections
more obvious and we can work with this modified

00:07:20.680 --> 00:07:24.740
graph and the solution to this modified graph
is exactly the same as the solution to the

00:07:24.740 --> 00:07:29.210
original graph, the problem does not change.
So, one of the most important features of

00:07:29.210 --> 00:07:33.680
modeling a problem is to keep the essential
parts of the problem and to throw away the

00:07:33.680 --> 00:07:38.710
inessential part, so that you can focus on
the problem that actually needs to be solved.

00:07:38.710 --> 00:07:45.460
So, another problem that we have seen which
is easily representable as a graph is that

00:07:45.460 --> 00:07:51.130
of an airline routing. So, when we have airline
routing, you might ask given the routes of

00:07:51.130 --> 00:07:56.050
an airline which are represented in this kind
of a format, by cites and arrows between them

00:07:56.050 --> 00:08:00.741
indicating flights in one direction, you might
ask questions about connectivity. Can I go

00:08:00.741 --> 00:08:03.650
from New Delhi to Trivandrum without changing
airlines.

00:08:03.650 --> 00:08:09.760
So, this is again a problem, where we can
focus on the connectivity and throw away the

00:08:09.760 --> 00:08:13.630
actual graph, it does not really a matter
to us the actual map, it does not matter to

00:08:13.630 --> 00:08:16.920
us how far apart these cities are, where they
are with respect to each other. All we are

00:08:16.920 --> 00:08:22.430
interested in knowing is which city is connected
to which city by a flight and given this what

00:08:22.430 --> 00:08:27.000
kind of routes can I find between pairs of
cities.

00:08:27.000 --> 00:08:35.760
So, formally a graph just consists of two
parts, it has a set of vertices or nodes which

00:08:35.760 --> 00:08:42.180
is normally written V and there are set of
edges which are pairs of vertices. So, each

00:08:42.180 --> 00:08:48.010
edge is the pair v comma v prime. Now, if
you have a graph of the kind that we had for

00:08:48.010 --> 00:08:54.370
the map where we were coloring it, then we
do not distinguish whether v is before v prime

00:08:54.370 --> 00:08:58.190
or v prime is before v. When, we say that
two states share a common boundary, it does

00:08:58.190 --> 00:09:02.440
not matter which order we mention them in.
So, there is an edge between v and v prime,

00:09:02.440 --> 00:09:05.690
if and only if there is an edge between v
prime and v, so there is only one edge between

00:09:05.690 --> 00:09:11.150
any pair of vertices. On the other hand, in
the airline graph we had directions, we might

00:09:11.150 --> 00:09:15.440
have a flight from one city to another city,
but not back. We have this triangular kind

00:09:15.440 --> 00:09:19.920
of things, where we could go from one city
to another there and back.

00:09:19.920 --> 00:09:25.380
So, this does not mean that you cannot go
back directly on this direction, so these

00:09:25.380 --> 00:09:29.131
are directed graphs. So, if we have an edge
from v to v prime in a directed graph, we

00:09:29.131 --> 00:09:34.120
do not guarantee that there is an edge from
v prime to v. And as we saw, we can now easily

00:09:34.120 --> 00:09:38.550
describe these kinds of graphs as pictures
by just drawing the nodes and then connecting

00:09:38.550 --> 00:09:44.221
the edges as lines. So, either undirected
or we could have directed graph in which we

00:09:44.221 --> 00:09:48.590
draw lines with arrows to indicate the direction.

00:09:48.590 --> 00:09:56.440
So, the graph coloring problem is a problem
on an undirected graph and we can formally

00:09:56.440 --> 00:10:04.020
say that the problem is to find a coloring
C, a coloring C is a function that assigns

00:10:04.020 --> 00:10:10.921
to each vertex v a color C of v and in terms
of the graph, when we have an edge v and v

00:10:10.921 --> 00:10:15.630
prime in our edge set, then C of v should
be different from C of v prime. This is what

00:10:15.630 --> 00:10:20.810
it means to be a legal coloring. So, we can
now take this graph as a mathematical object

00:10:20.810 --> 00:10:24.990
and describe the problem to be solved in a
completely objective way as a mathematical

00:10:24.990 --> 00:10:28.240
problem in terms of the vertices and the edges.

00:10:28.240 --> 00:10:35.720
Similarly, we can express the problem of finding
a root in the mathematical sense, initially

00:10:35.720 --> 00:10:42.590
our problem is a directed graph. Then, we
identify the vertices corresponding to the

00:10:42.590 --> 00:10:46.970
cities, where we want to find the nodes. So,
here we have v 0 represents New Delhi and

00:10:46.970 --> 00:10:53.100
v 5 represents Trivandrum, and our goal was
to find a route from v 0 to v 5 from New Delhi

00:10:53.100 --> 00:10:59.540
to Trivandrum. So, such a route can be described
as a path, so a path is just a sequence of

00:10:59.540 --> 00:11:03.480
vertices connected by edges. So, we want to
find a sequence of vertices such the first

00:11:03.480 --> 00:11:08.730
vertex v 0 is where we want to start, the
last vertex v k is where we want to end and

00:11:08.730 --> 00:11:16.660
each pair of vertices along the part v i,
v i plus 1 is a flight is an edge in our graph.

00:11:16.660 --> 00:11:23.060
Now, it is not required that a graph needs
to be directed for this problem to make sense,

00:11:23.060 --> 00:11:26.730
we could take the same graph and we could
assume they are undirected, that is the airline

00:11:26.730 --> 00:11:31.140
actually serves all pairs of cities in both
directions, the problem still makes sense.

00:11:31.140 --> 00:11:36.680
So, now, we have an undirected graph, but
we say that v 0, v 1 is an edge, means v 1,

00:11:36.680 --> 00:11:42.170
v 0 is also an edge. We can go backwards and
forwards and the same question now, can we

00:11:42.170 --> 00:11:47.900
find a sequence of vertices, which starts
at v 0 and goes to v 5 such that every pair

00:11:47.900 --> 00:11:51.450
on this path, every v i, v i plus 1 is an
edge in E.

